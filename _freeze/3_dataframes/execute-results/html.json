{
  "hash": "b49fbf90a318b4daf526cbfb8677669a",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Tutorial 3: Building and Working with DataFrames\"\ndate: last-modified\nauthor: \"Danet and Becks, based on originals by Delmas and Griffiths\"\nformat:\n    html:\n        embed-resources: true\ntitle-block-banner: true\n---\n\n\n\nWorking with vectors, arrays and matrices is important.  But quite often, we want to collect high-dimension data (multiple variables) from our simulations and store them in a spreadsheet type format.\n\nAs you've seen in Tutorial 1, there are plotting macros (`@df`) within the `StatsPlots` package that allow us to work with data frame objects from the `DataFrames` package.  A second benefit of the data frame object is that we can export it as a `csv` file and import this into **R** where we may prefer working on plotting and statistics.\n\nTo this end, here we will also introduce the `CSV` package, which is very handy for exporting DataFrame objects to csv files, and importing them as well, if you'd like.\n\n## The Data Frame\n\nTo initialise a dataframe you use the `DataFrame` function from the **DataFrames** package:\n\n::: {#011d701f .cell execution_count=2}\n``` {.julia .cell-code}\ndat = DataFrame(col1=[], col2=[], col3=[]) # we use [] to specify an empty column of any type and size.\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div><div style = \"float: left;\"><span>0×3 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">col1</th><th style = \"text-align: left;\">col2</th><th style = \"text-align: left;\">col3</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Any\" style = \"text-align: left;\">Any</th><th title = \"Any\" style = \"text-align: left;\">Any</th><th title = \"Any\" style = \"text-align: left;\">Any</th></tr></thead><tbody></tbody></table></div>\n```\n:::\n:::\n\n\nAlternately, you can specify the data type for each column.\n\n::: {#3bf7ab60 .cell execution_count=3}\n``` {.julia .cell-code}\ndat1 = DataFrame(col1=Float64[], col2=Int64[], col3=Float64[])\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div><div style = \"float: left;\"><span>0×3 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">col1</th><th style = \"text-align: left;\">col2</th><th style = \"text-align: left;\">col3</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody></tbody></table></div>\n```\n:::\n:::\n\n\nOf course, `col1` is not the only label you provide: variable names are super important and the conventions we use in **R** are also important here in **Julia**, e.g.  `a_b` or `AaBa` but not `a b` (no spaces allowed) or `a.b` (because the (dot) `.` functions as an operator).\n\n::: {#094ed121 .cell execution_count=4}\n``` {.julia .cell-code}\n# provide informative column titles using:\ndat2 = DataFrame(species=[], size=[], rate=[])\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div><div style = \"float: left;\"><span>0×3 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">species</th><th style = \"text-align: left;\">size</th><th style = \"text-align: left;\">rate</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Any\" style = \"text-align: left;\">Any</th><th title = \"Any\" style = \"text-align: left;\">Any</th><th title = \"Any\" style = \"text-align: left;\">Any</th></tr></thead><tbody></tbody></table></div>\n```\n:::\n:::\n\n\n### Allocating or adding data to a data frame.\n\nTo add data to a dataframe, we use the `push!` (read as push bang) command.\n\n::: {#06bed4d2 .cell execution_count=5}\n``` {.julia .cell-code}\nspecies = \"D.magna\"\nsize = 2.2\nrate = 4.2\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n4.2\n```\n:::\n:::\n\n\n::: {#cd389d2c .cell execution_count=6}\n``` {.julia .cell-code}\n# push!() arguments: data frame, data\npush!(dat2, [species, size, rate])\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div><div style = \"float: left;\"><span>1×3 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">species</th><th style = \"text-align: left;\">size</th><th style = \"text-align: left;\">rate</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Any\" style = \"text-align: left;\">Any</th><th title = \"Any\" style = \"text-align: left;\">Any</th><th title = \"Any\" style = \"text-align: left;\">Any</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">D.magna</td><td style = \"text-align: left;\">2.2</td><td style = \"text-align: left;\">4.2</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nOf course, the `push!()` function can append data to the existing data frame.  It is worth noting that `push!` can only append one row at a time. But since Julia is so good with loops (compared to R), this will make adding data to a dataframe really easy, and we'll learn how to do this in the next tutorial. What makes the `!` (bang) function very useful is that you can append (or remove, with `pop!()`) items to an object without having to assign it.\n\n::: {#94a38dec .cell execution_count=7}\n``` {.julia .cell-code}\nspecies2 = \"D.pulex\"\nsize2 = 1.8\nrate2 = 3.1\n\n# push!() arguments: data frame, data\npush!(dat2, [species2, size2, rate2])\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div><div style = \"float: left;\"><span>2×3 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">species</th><th style = \"text-align: left;\">size</th><th style = \"text-align: left;\">rate</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Any\" style = \"text-align: left;\">Any</th><th title = \"Any\" style = \"text-align: left;\">Any</th><th title = \"Any\" style = \"text-align: left;\">Any</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">D.magna</td><td style = \"text-align: left;\">2.2</td><td style = \"text-align: left;\">4.2</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">D.pulex</td><td style = \"text-align: left;\">1.8</td><td style = \"text-align: left;\">3.1</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n### Helper Functions for Data Frames\n\nYou can print data frames using `println`\n\n::: {#1c74f7cc .cell execution_count=8}\n``` {.julia .cell-code}\nprintln(dat2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2×3 DataFrame\n Row │ species  size  rate \n     │ Any      Any   Any  \n─────┼─────────────────────\n   1 │ D.magna  2.2   4.2\n   2 │ D.pulex  1.8   3.1\n```\n:::\n:::\n\n\nThere are `first` and `last` function that are like `head` and `tail` in R and elsewhere, with a first argument the data frame and the second argument the number of rows.\n\n::: {#a4509d62 .cell execution_count=9}\n``` {.julia .cell-code}\nfirst(dat2, 2)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div><div style = \"float: left;\"><span>2×3 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">species</th><th style = \"text-align: left;\">size</th><th style = \"text-align: left;\">rate</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Any\" style = \"text-align: left;\">Any</th><th title = \"Any\" style = \"text-align: left;\">Any</th><th title = \"Any\" style = \"text-align: left;\">Any</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">D.magna</td><td style = \"text-align: left;\">2.2</td><td style = \"text-align: left;\">4.2</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">D.pulex</td><td style = \"text-align: left;\">1.8</td><td style = \"text-align: left;\">3.1</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#87cce997 .cell execution_count=10}\n``` {.julia .cell-code}\nlast(dat2,2)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div><div style = \"float: left;\"><span>2×3 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">species</th><th style = \"text-align: left;\">size</th><th style = \"text-align: left;\">rate</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Any\" style = \"text-align: left;\">Any</th><th title = \"Any\" style = \"text-align: left;\">Any</th><th title = \"Any\" style = \"text-align: left;\">Any</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">D.magna</td><td style = \"text-align: left;\">2.2</td><td style = \"text-align: left;\">4.2</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">D.pulex</td><td style = \"text-align: left;\">1.8</td><td style = \"text-align: left;\">3.1</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nAnd as we learned with matrices and arrays, the `[row, column]` method also works for data frames:\n\n::: {#f57213cf .cell execution_count=11}\n``` {.julia .cell-code}\ndat2[1,2]\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n2.2\n```\n:::\n:::\n\n\n::: {#65b22b88 .cell execution_count=12}\n``` {.julia .cell-code}\ndat2[1,:]\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div><div style = \"float: left;\"><span>DataFrameRow (3 columns)</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowLabel\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">species</th><th style = \"text-align: left;\">size</th><th style = \"text-align: left;\">rate</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowLabel\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Any\" style = \"text-align: left;\">Any</th><th title = \"Any\" style = \"text-align: left;\">Any</th><th title = \"Any\" style = \"text-align: left;\">Any</th></tr></thead><tbody><tr><td class = \"rowLabel\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">D.magna</td><td style = \"text-align: left;\">2.2</td><td style = \"text-align: left;\">4.2</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#65203455 .cell execution_count=13}\n``` {.julia .cell-code}\ndat2[:,3]\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n2-element Vector{Any}:\n 4.2\n 3.1\n```\n:::\n:::\n\n\n## The CSV\n\nAs with *R*, there are functions to read and write `.csv` files to and from dataframes.  This makes interoperability with tools in R and standard data storage file formats easy.\n\nTo write our daphnia data to a csv file, we use a familiar syntax, but a function from the `CSV` package.\n\n::: {#1d08b765 .cell execution_count=14}\n``` {.julia .cell-code}\nCSV.write(\"daphniadata.csv\", dat2)\n```\n:::\n\n\nOf course, you can read files in using.... yes, `CSV.read`.  Note the second argument declares the data to go into a data frame.\n\n::: {#08f50a8a .cell execution_count=15}\n``` {.julia .cell-code}\ndaph_in = CSV.read(\"betterDaphniaData.csv\", DataFrame)\n```\n:::\n\n\n",
    "supporting": [
      "3_dataframes_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}
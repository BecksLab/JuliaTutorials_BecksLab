{
  "hash": "c83c8fc9613d2998770779839e3b7898",
  "result": {
    "engine": "julia",
    "markdown": "---\ntitle: \"Tutorial 10: Complex Experiments with the END\"\ndate: last-modified\nauthor: \"Danet and Becks, based on originals by Delmas and Griffiths\"\nformat:\n    html:\n        embed-resources: true\ntitle-block-banner: true\nengine: julia\n---\n\n\n\n\n::: {.callout-caution}\n## Warning\n\nStability was replaced by Shannon diversity - need to review context as well as if we want that or rather re-integrate stability\n:::\n\nThe previous tutorial focused on experiments where we manipulated the number of networks and various network parameters.  This is one set of things we can change/vary in an _in silico_ experiment.  The other set of things we can change are features of the model, such as the shape of the functional response (see Tutorial 7), features of the environment such as the carrying capacity, or even empirical relationships that drive trophic structure and interaction strengths, such as the predator-prey mass ratio.\n\nIn this tutorial, we are going to implement three experiments.  The first two will be 'simple' in that they vary only two things.  The final example will implement a large experiment changing five features of the model.\n\nYou may want to start a new script in the project.  We'll need the following packages (they are already installed... so we just need `using`).\n\n\n\n\n::: {#2 .cell execution_count=1}\n``` {.julia .cell-code}\nusing Random, Plots, Distributions, DataFrames, StatsPlots\nusing EcologicalNetworksDynamics\n```\n:::\n\n\n\n\n\n\n### Experiment 1: Carrying Capacity and the Predator Prey Mass Ratio\n\nNow we are set for our first experiment.  Lets first establish the parameters we need to make the food web and do the experiment.  We fix `S` at 20 and `C` at 0.15.  We then create vectors of Z and K.  \n\nZ is the predator - prey mass ratio, and defines how much bigger or smaller the predators are from their prey. The data suggest it is between predators are between 10 and 100 times bigger than their prey [see Brose et al 2006](https://doi.org/10.1890/0012-9658(2006)87[2411:CBRINF]2.0.CO;2). This value interacts with setting trophic levels in the model. \n\nThe default setting for the models is 1 - i.e. all species are within the same order of magnitude, predators are not bigger than their prey.  Here, we create a vector of values to explore, from predators being smaller, to them being 10 or 100 x larger as the data suggests.\n\n\n\n\n\n::: {#4 .cell execution_count=1}\n``` {.julia .cell-code}\n\n#Fixed Parameters\nS = 20\nC = 0.15\n\n# Variable Parameters\nZ_levels = [0.1, 1, 10, 100]\nK_levels = [0.1, 1, 10, 100]\n\n# run this to get same results as in the document\nRandom.seed!(123)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nTaskLocalRNG()\n```\n:::\n:::\n\n\n\n\n\n\nNow, lets set up the collecting data frame.\n\n\n\n\n::: {#6 .cell execution_count=1}\n``` {.julia .cell-code}\ndf_collect = DataFrame(Z = [], K = [], FinalRichness = [], FinalBiomass = [], ShannonDiversity = [])\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div><div style = \"float: left;\"><span>0×5 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">Z</th><th style = \"text-align: left;\">K</th><th style = \"text-align: left;\">FinalRichness</th><th style = \"text-align: left;\">FinalBiomass</th><th style = \"text-align: left;\">ShannonDiversity</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Any\" style = \"text-align: left;\">Any</th><th title = \"Any\" style = \"text-align: left;\">Any</th><th title = \"Any\" style = \"text-align: left;\">Any</th><th title = \"Any\" style = \"text-align: left;\">Any</th><th title = \"Any\" style = \"text-align: left;\">Any</th></tr></thead><tbody></tbody></table></div>\n```\n:::\n:::\n\n\n\n\n\n\nNow, set up the loop to use these variables and generate outputs. Notice that we use `for z in Z_levels` - this is a clever trick of the looping method, where `z` simply iterates over the values of `Z_levels` without having to specify the index value (e.g. no use of `Z_levels[i]` etc).\n\nThe significant BIG thing here is the LogisticGrowth function which allows us to set things like the carrying capacity (K) of the resources.  Here we use it to define custom values of the K paramter for carrying capacity, drawing on the values in the `K_levels` above.  Here, `pg` stands for Producer Growth function, and the paramter set in the food web is K.\n\nNote too our use of `println` and the values of `Z` and `K` to produce an informative _break_ between each combination.\n\n::: {.callout-note icon=false}\n\nCan you guess what increasing K will do to the biomass and richness of the community at equilibrium?  How about Z?  Will higher Z make things more or less stable?\n:::\n\n\n\n\n\n\n::: {#8 .cell execution_count=1}\n``` {.julia .cell-code}\nfor z in Z_levels\n    for k in K_levels\n\n        println(\" ***> This is iteration with Z = $z and K = $k\\n\")\n\n        # Define the food web\n        fw = Foodweb(:niche; S = S, C = C)\n        # specify the K value of the producer growth function\n\n        B0 = rand(S)\n        # specify model to simulate logistic growth as well as BM ratio\n        params = default_model(fw, BodyMass(; Z = z), LogisticGrowth(; K = k))\n        \n        # number of timestamps\n        t = 300\n\n        out = simulate(params, B0, t)\n\n        # calculate metrics\n        fin_rich = richness(out)\n        fin_biomass = total_biomass(out)\n        s_div = shannon_diversity(out)\n\n        push!(df_collect, [z, k, fin_rich, fin_biomass, s_div])\n    end\nend\n```\n:::\n\n\n\n\n\n\nWonderful.  Now we are in a position to learn about two new plotting methods.  First, let's look at the data frame we've created.\n\n\n\n\n::: {#10 .cell execution_count=1}\n``` {.julia .cell-code}\ndf_collect\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div><div style = \"float: left;\"><span>16×5 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">Z</th><th style = \"text-align: left;\">K</th><th style = \"text-align: left;\">FinalRichness</th><th style = \"text-align: left;\">FinalBiomass</th><th style = \"text-align: left;\">ShannonDiversity</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Any\" style = \"text-align: left;\">Any</th><th title = \"Any\" style = \"text-align: left;\">Any</th><th title = \"Any\" style = \"text-align: left;\">Any</th><th title = \"Any\" style = \"text-align: left;\">Any</th><th title = \"Any\" style = \"text-align: left;\">Any</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">0.1</td><td style = \"text-align: left;\">0.1</td><td style = \"text-align: left;\">[20, 20, 20, 20, 20, 20, 20, 20, 20, 20  …  5, 5, 5, 5, 5, 5, 5, 5, 5, 5]</td><td style = \"text-align: left;\">[8.15104, 7.35599, 6.86766, 6.20173, 5.62064, 4.93607, 4.31825, 3.63121, 3.00669, 2.39632  …  0.300001, 0.300001, 0.300001, 0.300001, 0.300001, 0.300001, 0.300001, 0.300001, 0.300001, 0.3]</td><td style = \"text-align: left;\">[16.6229, 16.7342, 16.5646, 16.1151, 15.6393, 15.1269, 14.7861, 14.5788, 14.548, 14.6324  …  3.00016, 3.00016, 3.00016, 3.00016, 3.00016, 3.00016, 3.00016, 3.00016, 3.00016, 3.00005]</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">0.1</td><td style = \"text-align: left;\">1.0</td><td style = \"text-align: left;\">[20, 20, 20, 20, 20, 20, 20, 20, 20, 20  …  11, 11, 11, 11, 11, 11, 11, 11, 11, 11]</td><td style = \"text-align: left;\">[12.4772, 11.4754, 10.7631, 9.95902, 9.14621, 8.41858, 7.61812, 6.84285, 6.08118, 5.33149  …  1.76616, 1.76616, 1.76616, 1.76616, 1.76616, 1.76616, 1.76616, 1.76616, 1.76616, 1.76616]</td><td style = \"text-align: left;\">[17.742, 17.8484, 17.6835, 17.2513, 16.4331, 15.4516, 14.5648, 14.1409, 13.9903, 13.8445  …  7.3824, 7.3824, 7.3824, 7.3824, 7.3824, 7.3824, 7.3824, 7.3824, 7.3824, 7.38235]</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">0.1</td><td style = \"text-align: left;\">10.0</td><td style = \"text-align: left;\">[20, 20, 20, 20, 20, 20, 20, 20, 20, 20  …  13, 13, 13, 13, 13, 13, 13, 13, 13, 13]</td><td style = \"text-align: left;\">[9.25026, 8.51092, 8.00559, 7.44123, 6.91671, 6.27631, 5.65377, 4.94222, 4.26539, 3.54824  …  2.25548, 2.2559, 2.25643, 2.25698, 2.25747, 2.25783, 2.25806, 2.25819, 2.25825, 2.25825]</td><td style = \"text-align: left;\">[14.6862, 14.6468, 14.2896, 13.6899, 12.9845, 12.0663, 11.3051, 10.7473, 10.5693, 10.7805  …  9.57129, 9.59447, 9.62346, 9.6528, 9.67659, 9.69307, 9.70369, 9.71014, 9.71404, 9.71427]</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: left;\">0.1</td><td style = \"text-align: left;\">100.0</td><td style = \"text-align: left;\">[20, 20, 20, 20, 20, 20, 20, 20, 20, 20  …  20, 20, 20, 20, 20, 20, 20, 20, 20, 20]</td><td style = \"text-align: left;\">[11.7083, 11.0424, 10.5769, 9.93713, 9.4234, 8.80592, 8.23005, 7.54626, 6.97782, 6.26384  …  3.48233, 3.48295, 3.48399, 3.48495, 3.48596, 3.48667, 3.48716, 3.48743, 3.48757, 3.48759]</td><td style = \"text-align: left;\">[18.2061, 17.7393, 17.1158, 15.8476, 14.5755, 13.1387, 12.2288, 11.7098, 11.6218, 11.8449  …  14.6644, 14.6766, 14.6955, 14.7124, 14.7303, 14.7429, 14.7523, 14.7579, 14.7612, 14.762]</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: left;\">1.0</td><td style = \"text-align: left;\">0.1</td><td style = \"text-align: left;\">[20, 20, 20, 20, 20, 20, 20, 20, 20, 20  …  14, 11, 11, 7, 7, 7, 7, 6, 6, 6]</td><td style = \"text-align: left;\">[9.94865, 9.31694, 8.91556, 8.37917, 7.98085, 7.48504, 7.05457, 6.53892, 6.03007, 5.45877  …  0.599995, 0.599995, 0.600001, 0.600001, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6]</td><td style = \"text-align: left;\">[16.9057, 16.7928, 16.5411, 15.9674, 15.4178, 14.6761, 13.9969, 13.1036, 12.1136, 10.9472  …  6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0]</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: left;\">1.0</td><td style = \"text-align: left;\">1.0</td><td style = \"text-align: left;\">[20, 20, 20, 20, 20, 20, 20, 20, 20, 20  …  17, 17, 16, 16, 16, 16, 15, 15, 14, 14]</td><td style = \"text-align: left;\">[8.18822, 7.87201, 7.51513, 7.09849, 6.67715, 6.24736, 5.77386, 5.30732, 4.78624, 4.26858  …  2.1041, 2.1036, 2.1036, 2.10339, 2.10338, 2.10338, 2.10338, 2.1034, 2.1034, 2.10341]</td><td style = \"text-align: left;\">[17.8751, 17.9835, 17.9691, 17.7811, 17.4596, 17.0672, 16.6213, 16.2204, 15.8747, 15.676  …  9.70326, 9.70168, 9.70168, 9.70046, 9.7004, 9.7004, 9.7004, 9.70055, 9.70055, 9.70071]</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: left;\">1.0</td><td style = \"text-align: left;\">10.0</td><td style = \"text-align: left;\">[20, 20, 20, 20, 20, 20, 20, 20, 20, 20  …  18, 18, 18, 18, 17, 17, 17, 17, 17, 17]</td><td style = \"text-align: left;\">[11.9214, 11.5912, 11.2096, 10.7345, 10.2291, 9.65051, 9.08087, 8.50293, 7.95285, 7.4397  …  12.5097, 12.5097, 12.5097, 12.5098, 12.5098, 12.5098, 12.5098, 12.5098, 12.5098, 12.5098]</td><td style = \"text-align: left;\">[17.7631, 17.8918, 17.8487, 17.5309, 16.9389, 15.9573, 14.662, 13.1789, 11.9185, 11.0675  …  4.62639, 4.61727, 4.60955, 4.60285, 4.60285, 4.59699, 4.59175, 4.58698, 4.58255, 4.57863]</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">8</td><td style = \"text-align: left;\">1.0</td><td style = \"text-align: left;\">100.0</td><td style = \"text-align: left;\">[20, 20, 20, 20, 20, 20, 20, 20, 20, 20  …  20, 20, 20, 20, 20, 20, 20, 20, 20, 20]</td><td style = \"text-align: left;\">[9.81854, 9.78941, 9.7508, 9.70287, 9.63915, 9.53889, 9.36204, 9.09799, 8.78533, 8.50462  …  7.83776, 7.83881, 7.83874, 7.83824, 7.83785, 7.8378, 7.83791, 7.83792, 7.83791, 7.83792]</td><td style = \"text-align: left;\">[15.8542, 15.9962, 16.1459, 16.2131, 16.1391, 15.9368, 15.6428, 15.2171, 14.6976, 14.3231  …  14.8658, 14.8748, 14.8756, 14.873, 14.8704, 14.8698, 14.8703, 14.8705, 14.8704, 14.8705]</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">9</td><td style = \"text-align: left;\">10.0</td><td style = \"text-align: left;\">0.1</td><td style = \"text-align: left;\">[20, 20, 20, 20, 20, 20, 20, 20, 20, 20  …  13, 13, 12, 12, 10, 10, 10, 9, 9, 8]</td><td style = \"text-align: left;\">[12.3589, 11.1366, 10.528, 9.73548, 9.28095, 8.70753, 8.38507, 7.92468, 7.6241, 7.16456  …  0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7]</td><td style = \"text-align: left;\">[17.9611, 18.047, 17.9192, 17.5077, 17.121, 16.4637, 16.0159, 15.3056, 14.8254, 14.13  …  7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0]</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">10</td><td style = \"text-align: left;\">10.0</td><td style = \"text-align: left;\">1.0</td><td style = \"text-align: left;\">[20, 20, 20, 20, 20, 20, 20, 20, 20, 20  …  20, 20, 19, 19, 19, 19, 19, 19, 19, 19]</td><td style = \"text-align: left;\">[8.42215, 8.20465, 7.99326, 7.76301, 7.53365, 7.30894, 7.04805, 6.82182, 6.50908, 6.21272  …  2.86069, 2.86431, 2.86431, 2.86744, 2.87126, 2.87422, 2.87704, 2.87913, 2.88089, 2.88177]</td><td style = \"text-align: left;\">[15.0882, 15.2155, 15.2234, 15.0786, 14.8185, 14.5613, 14.3405, 14.2066, 14.0631, 13.9396  …  13.2383, 13.2133, 13.2133, 13.1887, 13.1531, 13.1189, 13.0773, 13.0366, 12.9906, 12.9603]</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">11</td><td style = \"text-align: left;\">10.0</td><td style = \"text-align: left;\">10.0</td><td style = \"text-align: left;\">[20, 20, 20, 20, 20, 20, 20, 20, 20, 20  …  17, 17, 17, 17, 17, 17, 16, 16, 16, 16]</td><td style = \"text-align: left;\">[8.76005, 8.6219, 8.45014, 8.27291, 8.03749, 7.83254, 7.54527, 7.26893, 6.89872, 6.5367  …  4.352, 4.37513, 4.3948, 4.41157, 4.4259, 4.43803, 4.43803, 4.44812, 4.45638, 4.45893]</td><td style = \"text-align: left;\">[16.3521, 16.3257, 16.2454, 16.1206, 15.8993, 15.6612, 15.275, 14.8714, 14.3179, 13.7872  …  5.58795, 5.46404, 5.36072, 5.2744, 5.20203, 5.14192, 5.14192, 5.09276, 5.0532, 5.04108]</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">12</td><td style = \"text-align: left;\">10.0</td><td style = \"text-align: left;\">100.0</td><td style = \"text-align: left;\">[20, 20, 20, 20, 20, 20, 20, 20, 20, 20  …  20, 20, 20, 20, 20, 20, 20, 20, 20, 20]</td><td style = \"text-align: left;\">[8.25211, 8.29101, 8.4592, 8.87757, 9.76632, 11.7568, 16.001, 25.5672, 46.8751, 88.1647  …  243.87, 243.868, 243.863, 243.857, 243.852, 243.848, 243.845, 243.843, 243.841, 243.84]</td><td style = \"text-align: left;\">[15.4288, 15.4367, 15.3683, 14.9952, 14.0388, 12.1209, 9.40314, 6.56688, 4.55697, 3.55452  …  6.58682, 6.58612, 6.58472, 6.58295, 6.58118, 6.57958, 6.57821, 6.57708, 6.57618, 6.57556]</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">13</td><td style = \"text-align: left;\">100.0</td><td style = \"text-align: left;\">0.1</td><td style = \"text-align: left;\">[20, 20, 20, 20, 20, 20, 20, 20, 20, 20  …  19, 19, 18, 18, 18, 18, 18, 18, 18, 18]</td><td style = \"text-align: left;\">[11.5095, 10.9511, 10.7168, 10.3916, 10.2152, 9.9237, 9.78424, 9.46529, 9.30356, 8.92472  …  0.472889, 0.463688, 0.463688, 0.455691, 0.448684, 0.442486, 0.436958, 0.431991, 0.427513, 0.425609]</td><td style = \"text-align: left;\">[17.231, 17.3743, 17.335, 17.1761, 17.0496, 16.8121, 16.6962, 16.4432, 16.324, 16.0738  …  5.95521, 5.74108, 5.74108, 5.5499, 5.37858, 5.22417, 5.08415, 4.95644, 4.83969, 4.78959]</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">14</td><td style = \"text-align: left;\">100.0</td><td style = \"text-align: left;\">1.0</td><td style = \"text-align: left;\">[20, 20, 20, 20, 20, 20, 20, 20, 20, 20  …  20, 20, 20, 20, 20, 20, 20, 20, 20, 20]</td><td style = \"text-align: left;\">[8.94845, 8.84267, 8.70565, 8.58269, 8.46112, 8.33459, 8.2076, 8.07545, 7.93311, 7.80568  …  8.84776, 8.83373, 8.82279, 8.81646, 8.81702, 8.82562, 8.83778, 8.84947, 8.8573, 8.85948]</td><td style = \"text-align: left;\">[16.8594, 16.831, 16.7339, 16.6093, 16.4917, 16.4208, 16.4238, 16.5015, 16.6608, 16.8785  …  11.6325, 11.5115, 11.4211, 11.3514, 11.3021, 11.2653, 11.2375, 11.2081, 11.1754, 11.1534]</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">15</td><td style = \"text-align: left;\">100.0</td><td style = \"text-align: left;\">10.0</td><td style = \"text-align: left;\">[20, 20, 20, 20, 20, 20, 20, 20, 20, 20  …  20, 20, 20, 20, 20, 20, 20, 20, 20, 20]</td><td style = \"text-align: left;\">[9.0416, 9.1737, 9.5697, 10.2502, 11.3574, 13.2685, 16.0394, 20.0685, 25.3442, 31.3042  …  79.4917, 79.5051, 79.498, 79.4849, 79.4774, 79.4781, 79.4801, 79.4797, 79.4785, 79.4782]</td><td style = \"text-align: left;\">[15.9684, 16.1206, 16.4693, 16.7484, 16.6086, 15.5647, 13.7709, 11.8335, 10.3515, 9.58567  …  11.1015, 11.0926, 11.0865, 11.0856, 11.0869, 11.0872, 11.0863, 11.0855, 11.0854, 11.0854]</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">16</td><td style = \"text-align: left;\">100.0</td><td style = \"text-align: left;\">100.0</td><td style = \"text-align: left;\">[20, 20, 20, 20, 20, 20, 20, 20, 20, 20  …  20, 20, 20, 20, 20, 20, 20, 20, 20, 20]</td><td style = \"text-align: left;\">[11.5292, 11.6221, 11.8303, 12.2001, 12.9034, 14.2178, 16.6995, 21.3803, 29.102, 40.6004  …  465.906, 464.433, 463.337, 461.4, 458.545, 455.022, 451.776, 450.914, 456.694, 471.903]</td><td style = \"text-align: left;\">[18.3089, 18.2607, 18.15, 17.9446, 17.542, 16.8141, 15.6206, 13.9258, 12.0175, 9.86971  …  7.1311, 7.20354, 7.11395, 6.98256, 6.85529, 6.73983, 6.6778, 6.78037, 7.20202, 7.95913]</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n\n\n\n\n#### Visualising the experiment\n\nOne option here is to plot one of our `Final` Objects as the response variable against the valuse of Z and K.  In R, we'd use ggplot2. Here we'll use `StatsPlots` as we learned about in Tutorial 5.  Can you make this work in the regular `Plots` syntax?\n\nLet's first look at a single plot of stability\n\n\n\n::: {#12 .cell execution_count=0}\n``` {.julia .cell-code}\n@df df_collect plot(:K, [:FinalStability], group = :Z, \n    ylabel = \"Stabilty\", \n\txlabel = \"Karrying Kapacity\",\n    seriestype = [:scatter, :line],\n    legend = false)\n```\n:::\n\n\n\n\n\n\nNow some new ploting tricks... 3 plots in a layout.\n\n\n\n\n::: {#14 .cell execution_count=0}\n``` {.julia .cell-code}\np1 = @df df_collect plot(:K, [:FinalStability], group = :Z, \n    legend = :bottomright,\n    ylabel = \"Stabilty\", \n\txlabel = \"Karrying Kapacity\",\n    seriestype = [:scatter, :line])\n\np2 = @df df_collect plot(:K, [:FinalBiomass], group = :Z, \n    legend = :bottomright,\n    ylabel = \"Biomass\", \n\txlabel = \"Karrying Kapacity\",\n    seriestype = [:scatter, :line])\n    \np3 = @df df_collect plot(:K, [:FinalRichness], group = :Z, \n    legend = :bottomright,\n    ylabel = \"Richness\", \n\txlabel = \"Karrying Kapacity\",\n    seriestype = [:scatter, :line])\n\n# create a layout of 3 graphs stacked on top of each other.\nplot(p1, p2, p3, layout=(3,1), legend = false)\n```\n:::\n\n\n\n\n\n\n### Interpretation!\n\n#### Challenge - can you get the number of extinctions into the data frame?\n\n### Experiment 2: The Functional Response\n\nThe functional response is the relationship between how much a consumer eats and the 'density' of the prey items.  If you can recall from your ecology courses/classes/modules, there are three classic shapes: The Type I, Type II and Type III.\n\nA predator feeding with a Type I delivers to the prey a 'constant mortality rate' (the slope of the Type I line).  This means that the effect of predation is density _independent_ because prey mortality rate does not vary by prey density.  Remember, density dependence (negative feedback that stabilises communities) is defined by survival decreasing with increasing density, or in this case, mortality rates _increasing_ with increasing density.\n\nA predator feeding with the Type II delivers an _inverse density dependent_ mortality rate.  The slope of the Type II line actually goes down as density of the prey goes up meaning that mortality rates for the prey, caused by the predator, are going down with prey density.  This means that the effect of predation is _inverse density dependent_ in the Type II.  This is **destabilising**.\n\nFinally, a predator feeding via a Type III can deliver a _density dependent_ mortality rate to the prey, but only at low prey densities.  This is an S shaped curve.  Below the inflection point, the slope is actually getting steeper.  This means that as prey density increases up to the inflection, their mortality rate from predation increases (survival goes down with density going up). This is the hallmark of density dependence and can **stabilise** consumer-resource interactions.\n\n::: {.callout-tip icon=false}\n\nRemember that the logistic growth equation, with a carying capacity specified, is also a source of _density dependent negative feedback_\n:::\n\n::: {.callout-tip icon=false}\n\nThe Type II is the MOST common.  Type I is rare and even non-existent because it suggests there are no limits to how much a consumer can eat.  Type III is also rare, but it is at least plausible and interesting.\n:::\n\n\n\n\n::: {#16 .cell execution_count=1}\n``` {.julia .cell-code}\n\nf_t1(n) = 0.5*n\nf_t2(n) = 0.5*n/(0.2+0.01*n)\nf_t3(n) = 0.5*n^2/(10 + 0.01*n^2)\n\nplot(f_t1, 0, 100, label = \"Type I\")\nplot!(f_t2, 0, 100, label = \"Type II\")\nplot!(f_t3, 0, 100, label = \"Type III\")\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"672\" height=\"480\" viewBox=\"0 0 2688 1920\">\n<defs>\n  <clipPath id=\"clip240\">\n    <rect x=\"0\" y=\"0\" width=\"2688\" height=\"1920\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip240)\" d=\"M0 1920 L2688 1920 L2688 -4.26326e-14 L0 -4.26326e-14  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip241\">\n    <rect x=\"537\" y=\"0\" width=\"1883\" height=\"1883\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip240)\" d=\"M144.733 1800.78 L2640.76 1800.78 L2640.76 47.2441 L144.733 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip242\">\n    <rect x=\"144\" y=\"47\" width=\"2497\" height=\"1755\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"215.375,1800.78 215.375,47.2441 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"804.06,1800.78 804.06,47.2441 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1392.74,1800.78 1392.74,47.2441 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1981.43,1800.78 1981.43,47.2441 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2570.11,1800.78 2570.11,47.2441 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"144.733,1751.15 2640.76,1751.15 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"144.733,1420.3 2640.76,1420.3 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"144.733,1089.44 2640.76,1089.44 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"144.733,758.584 2640.76,758.584 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"144.733,427.728 2640.76,427.728 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"144.733,96.8724 2640.76,96.8724 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"144.733,1800.78 2640.76,1800.78 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"215.375,1800.78 215.375,1781.88 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"804.06,1800.78 804.06,1781.88 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1392.74,1800.78 1392.74,1781.88 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1981.43,1800.78 1981.43,1781.88 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2570.11,1800.78 2570.11,1781.88 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M215.375 1834 Q211.764 1834 209.935 1837.57 Q208.13 1841.11 208.13 1848.24 Q208.13 1855.34 209.935 1858.91 Q211.764 1862.45 215.375 1862.45 Q219.009 1862.45 220.815 1858.91 Q222.644 1855.34 222.644 1848.24 Q222.644 1841.11 220.815 1837.57 Q219.009 1834 215.375 1834 M215.375 1830.3 Q221.185 1830.3 224.241 1834.9 Q227.319 1839.49 227.319 1848.24 Q227.319 1856.96 224.241 1861.57 Q221.185 1866.15 215.375 1866.15 Q209.565 1866.15 206.486 1861.57 Q203.431 1856.96 203.431 1848.24 Q203.431 1839.49 206.486 1834.9 Q209.565 1830.3 215.375 1830.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M783.331 1861.55 L799.65 1861.55 L799.65 1865.48 L777.706 1865.48 L777.706 1861.55 Q780.368 1858.79 784.951 1854.16 Q789.558 1849.51 790.738 1848.17 Q792.983 1845.65 793.863 1843.91 Q794.766 1842.15 794.766 1840.46 Q794.766 1837.71 792.821 1835.97 Q790.9 1834.23 787.798 1834.23 Q785.599 1834.23 783.146 1835 Q780.715 1835.76 777.937 1837.31 L777.937 1832.59 Q780.761 1831.46 783.215 1830.88 Q785.669 1830.3 787.706 1830.3 Q793.076 1830.3 796.27 1832.98 Q799.465 1835.67 799.465 1840.16 Q799.465 1842.29 798.655 1844.21 Q797.868 1846.11 795.761 1848.7 Q795.182 1849.37 792.081 1852.59 Q788.979 1855.78 783.331 1861.55 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M809.511 1830.92 L827.868 1830.92 L827.868 1834.86 L813.794 1834.86 L813.794 1843.33 Q814.812 1842.98 815.831 1842.82 Q816.849 1842.64 817.868 1842.64 Q823.655 1842.64 827.034 1845.81 Q830.414 1848.98 830.414 1854.4 Q830.414 1859.97 826.942 1863.08 Q823.469 1866.15 817.15 1866.15 Q814.974 1866.15 812.706 1865.78 Q810.46 1865.41 808.053 1864.67 L808.053 1859.97 Q810.136 1861.11 812.358 1861.66 Q814.581 1862.22 817.057 1862.22 Q821.062 1862.22 823.4 1860.11 Q825.738 1858.01 825.738 1854.4 Q825.738 1850.78 823.4 1848.68 Q821.062 1846.57 817.057 1846.57 Q815.182 1846.57 813.307 1846.99 Q811.456 1847.4 809.511 1848.28 L809.511 1830.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1367.44 1830.92 L1385.8 1830.92 L1385.8 1834.86 L1371.73 1834.86 L1371.73 1843.33 Q1372.74 1842.98 1373.76 1842.82 Q1374.78 1842.64 1375.8 1842.64 Q1381.59 1842.64 1384.97 1845.81 Q1388.35 1848.98 1388.35 1854.4 Q1388.35 1859.97 1384.87 1863.08 Q1381.4 1866.15 1375.08 1866.15 Q1372.91 1866.15 1370.64 1865.78 Q1368.39 1865.41 1365.99 1864.67 L1365.99 1859.97 Q1368.07 1861.11 1370.29 1861.66 Q1372.51 1862.22 1374.99 1862.22 Q1378.99 1862.22 1381.33 1860.11 Q1383.67 1858.01 1383.67 1854.4 Q1383.67 1850.78 1381.33 1848.68 Q1378.99 1846.57 1374.99 1846.57 Q1373.11 1846.57 1371.24 1846.99 Q1369.39 1847.4 1367.44 1848.28 L1367.44 1830.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1407.56 1834 Q1403.95 1834 1402.12 1837.57 Q1400.31 1841.11 1400.31 1848.24 Q1400.31 1855.34 1402.12 1858.91 Q1403.95 1862.45 1407.56 1862.45 Q1411.19 1862.45 1413 1858.91 Q1414.83 1855.34 1414.83 1848.24 Q1414.83 1841.11 1413 1837.57 Q1411.19 1834 1407.56 1834 M1407.56 1830.3 Q1413.37 1830.3 1416.42 1834.9 Q1419.5 1839.49 1419.5 1848.24 Q1419.5 1856.96 1416.42 1861.57 Q1413.37 1866.15 1407.56 1866.15 Q1401.75 1866.15 1398.67 1861.57 Q1395.61 1856.96 1395.61 1848.24 Q1395.61 1839.49 1398.67 1834.9 Q1401.75 1830.3 1407.56 1830.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1955.28 1830.92 L1977.51 1830.92 L1977.51 1832.91 L1964.96 1865.48 L1960.08 1865.48 L1971.88 1834.86 L1955.28 1834.86 L1955.28 1830.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1986.67 1830.92 L2005.03 1830.92 L2005.03 1834.86 L1990.95 1834.86 L1990.95 1843.33 Q1991.97 1842.98 1992.99 1842.82 Q1994.01 1842.64 1995.03 1842.64 Q2000.82 1842.64 2004.2 1845.81 Q2007.57 1848.98 2007.57 1854.4 Q2007.57 1859.97 2004.1 1863.08 Q2000.63 1866.15 1994.31 1866.15 Q1992.14 1866.15 1989.87 1865.78 Q1987.62 1865.41 1985.21 1864.67 L1985.21 1859.97 Q1987.3 1861.11 1989.52 1861.66 Q1991.74 1862.22 1994.22 1862.22 Q1998.22 1862.22 2000.56 1860.11 Q2002.9 1858.01 2002.9 1854.4 Q2002.9 1850.78 2000.56 1848.68 Q1998.22 1846.57 1994.22 1846.57 Q1992.34 1846.57 1990.47 1846.99 Q1988.62 1847.4 1986.67 1848.28 L1986.67 1830.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2529.72 1861.55 L2537.36 1861.55 L2537.36 1835.18 L2529.05 1836.85 L2529.05 1832.59 L2537.31 1830.92 L2541.99 1830.92 L2541.99 1861.55 L2549.63 1861.55 L2549.63 1865.48 L2529.72 1865.48 L2529.72 1861.55 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2569.07 1834 Q2565.46 1834 2563.63 1837.57 Q2561.83 1841.11 2561.83 1848.24 Q2561.83 1855.34 2563.63 1858.91 Q2565.46 1862.45 2569.07 1862.45 Q2572.71 1862.45 2574.51 1858.91 Q2576.34 1855.34 2576.34 1848.24 Q2576.34 1841.11 2574.51 1837.57 Q2572.71 1834 2569.07 1834 M2569.07 1830.3 Q2574.88 1830.3 2577.94 1834.9 Q2581.02 1839.49 2581.02 1848.24 Q2581.02 1856.96 2577.94 1861.57 Q2574.88 1866.15 2569.07 1866.15 Q2563.26 1866.15 2560.18 1861.57 Q2557.13 1856.96 2557.13 1848.24 Q2557.13 1839.49 2560.18 1834.9 Q2563.26 1830.3 2569.07 1830.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2599.23 1834 Q2595.62 1834 2593.79 1837.57 Q2591.99 1841.11 2591.99 1848.24 Q2591.99 1855.34 2593.79 1858.91 Q2595.62 1862.45 2599.23 1862.45 Q2602.87 1862.45 2604.67 1858.91 Q2606.5 1855.34 2606.5 1848.24 Q2606.5 1841.11 2604.67 1837.57 Q2602.87 1834 2599.23 1834 M2599.23 1830.3 Q2605.04 1830.3 2608.1 1834.9 Q2611.18 1839.49 2611.18 1848.24 Q2611.18 1856.96 2608.1 1861.57 Q2605.04 1866.15 2599.23 1866.15 Q2593.42 1866.15 2590.35 1861.57 Q2587.29 1856.96 2587.29 1848.24 Q2587.29 1839.49 2590.35 1834.9 Q2593.42 1830.3 2599.23 1830.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"144.733,1800.78 144.733,47.2441 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"144.733,1751.15 163.631,1751.15 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"144.733,1420.3 163.631,1420.3 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"144.733,1089.44 163.631,1089.44 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"144.733,758.584 163.631,758.584 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"144.733,427.728 163.631,427.728 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"144.733,96.8724 163.631,96.8724 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M92.4686 1736.95 Q88.8575 1736.95 87.0288 1740.51 Q85.2232 1744.06 85.2232 1751.19 Q85.2232 1758.29 87.0288 1761.86 Q88.8575 1765.4 92.4686 1765.4 Q96.1028 1765.4 97.9083 1761.86 Q99.737 1758.29 99.737 1751.19 Q99.737 1744.06 97.9083 1740.51 Q96.1028 1736.95 92.4686 1736.95 M92.4686 1733.25 Q98.2787 1733.25 101.334 1737.85 Q104.413 1742.44 104.413 1751.19 Q104.413 1759.91 101.334 1764.52 Q98.2787 1769.1 92.4686 1769.1 Q86.6584 1769.1 83.5797 1764.52 Q80.5242 1759.91 80.5242 1751.19 Q80.5242 1742.44 83.5797 1737.85 Q86.6584 1733.25 92.4686 1733.25 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M53.1169 1433.64 L60.7558 1433.64 L60.7558 1407.27 L52.4456 1408.94 L52.4456 1404.68 L60.7095 1403.02 L65.3854 1403.02 L65.3854 1433.64 L73.0242 1433.64 L73.0242 1437.58 L53.1169 1437.58 L53.1169 1433.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M92.4686 1406.09 Q88.8575 1406.09 87.0288 1409.66 Q85.2232 1413.2 85.2232 1420.33 Q85.2232 1427.44 87.0288 1431 Q88.8575 1434.54 92.4686 1434.54 Q96.1028 1434.54 97.9083 1431 Q99.737 1427.44 99.737 1420.33 Q99.737 1413.2 97.9083 1409.66 Q96.1028 1406.09 92.4686 1406.09 M92.4686 1402.39 Q98.2787 1402.39 101.334 1407 Q104.413 1411.58 104.413 1420.33 Q104.413 1429.06 101.334 1433.66 Q98.2787 1438.25 92.4686 1438.25 Q86.6584 1438.25 83.5797 1433.66 Q80.5242 1429.06 80.5242 1420.33 Q80.5242 1411.58 83.5797 1407 Q86.6584 1402.39 92.4686 1402.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M56.3345 1102.78 L72.6539 1102.78 L72.6539 1106.72 L50.7095 1106.72 L50.7095 1102.78 Q53.3715 1100.03 57.9549 1095.4 Q62.5613 1090.75 63.7419 1089.4 Q65.9872 1086.88 66.8668 1085.15 Q67.7696 1083.39 67.7696 1081.7 Q67.7696 1078.94 65.8252 1077.21 Q63.9039 1075.47 60.8021 1075.47 Q58.603 1075.47 56.1493 1076.23 Q53.7188 1077 50.941 1078.55 L50.941 1073.83 Q53.7651 1072.69 56.2188 1072.11 Q58.6724 1071.53 60.7095 1071.53 Q66.0798 1071.53 69.2742 1074.22 Q72.4687 1076.9 72.4687 1081.4 Q72.4687 1083.53 71.6585 1085.45 Q70.8715 1087.34 68.765 1089.94 Q68.1863 1090.61 65.0845 1093.83 Q61.9826 1097.02 56.3345 1102.78 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M92.4686 1075.24 Q88.8575 1075.24 87.0288 1078.8 Q85.2232 1082.34 85.2232 1089.47 Q85.2232 1096.58 87.0288 1100.15 Q88.8575 1103.69 92.4686 1103.69 Q96.1028 1103.69 97.9083 1100.15 Q99.737 1096.58 99.737 1089.47 Q99.737 1082.34 97.9083 1078.8 Q96.1028 1075.24 92.4686 1075.24 M92.4686 1071.53 Q98.2787 1071.53 101.334 1076.14 Q104.413 1080.72 104.413 1089.47 Q104.413 1098.2 101.334 1102.81 Q98.2787 1107.39 92.4686 1107.39 Q86.6584 1107.39 83.5797 1102.81 Q80.5242 1098.2 80.5242 1089.47 Q80.5242 1080.72 83.5797 1076.14 Q86.6584 1071.53 92.4686 1071.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M66.4733 757.23 Q69.8298 757.947 71.7048 760.216 Q73.6029 762.484 73.6029 765.818 Q73.6029 770.933 70.0844 773.734 Q66.5659 776.535 60.0845 776.535 Q57.9086 776.535 55.5938 776.095 Q53.3021 775.679 50.8484 774.822 L50.8484 770.308 Q52.7928 771.443 55.1077 772.021 Q57.4225 772.6 59.9456 772.6 Q64.3437 772.6 66.6354 770.864 Q68.9502 769.128 68.9502 765.818 Q68.9502 762.762 66.7974 761.049 Q64.6678 759.313 60.8484 759.313 L56.8206 759.313 L56.8206 755.47 L61.0335 755.47 Q64.4826 755.47 66.3113 754.105 Q68.14 752.716 68.14 750.123 Q68.14 747.461 66.2419 746.049 Q64.3669 744.614 60.8484 744.614 Q58.9271 744.614 56.728 745.031 Q54.529 745.447 51.8901 746.327 L51.8901 742.16 Q54.5521 741.42 56.8669 741.049 Q59.2049 740.679 61.265 740.679 Q66.5891 740.679 69.6909 743.109 Q72.7927 745.517 72.7927 749.637 Q72.7927 752.507 71.1492 754.498 Q69.5057 756.466 66.4733 757.23 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M92.4686 744.383 Q88.8575 744.383 87.0288 747.947 Q85.2232 751.489 85.2232 758.619 Q85.2232 765.725 87.0288 769.29 Q88.8575 772.831 92.4686 772.831 Q96.1028 772.831 97.9083 769.29 Q99.737 765.725 99.737 758.619 Q99.737 751.489 97.9083 747.947 Q96.1028 744.383 92.4686 744.383 M92.4686 740.679 Q98.2787 740.679 101.334 745.285 Q104.413 749.869 104.413 758.619 Q104.413 767.345 101.334 771.952 Q98.2787 776.535 92.4686 776.535 Q86.6584 776.535 83.5797 771.952 Q80.5242 767.345 80.5242 758.619 Q80.5242 749.869 83.5797 745.285 Q86.6584 740.679 92.4686 740.679 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M65.1539 414.522 L53.3484 432.971 L65.1539 432.971 L65.1539 414.522 M63.927 410.448 L69.8066 410.448 L69.8066 432.971 L74.7372 432.971 L74.7372 436.86 L69.8066 436.86 L69.8066 445.008 L65.1539 445.008 L65.1539 436.86 L49.5521 436.86 L49.5521 432.346 L63.927 410.448 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M92.4686 413.527 Q88.8575 413.527 87.0288 417.092 Q85.2232 420.633 85.2232 427.763 Q85.2232 434.869 87.0288 438.434 Q88.8575 441.976 92.4686 441.976 Q96.1028 441.976 97.9083 438.434 Q99.737 434.869 99.737 427.763 Q99.737 420.633 97.9083 417.092 Q96.1028 413.527 92.4686 413.527 M92.4686 409.823 Q98.2787 409.823 101.334 414.43 Q104.413 419.013 104.413 427.763 Q104.413 436.49 101.334 441.096 Q98.2787 445.679 92.4686 445.679 Q86.6584 445.679 83.5797 441.096 Q80.5242 436.49 80.5242 427.763 Q80.5242 419.013 83.5797 414.43 Q86.6584 409.823 92.4686 409.823 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M52.353 79.5924 L70.7094 79.5924 L70.7094 83.5276 L56.6354 83.5276 L56.6354 91.9998 Q57.6539 91.6526 58.6724 91.4905 Q59.691 91.3053 60.7095 91.3053 Q66.4965 91.3053 69.8761 94.4766 Q73.2557 97.6479 73.2557 103.065 Q73.2557 108.643 69.7835 111.745 Q66.3113 114.824 59.9919 114.824 Q57.816 114.824 55.5475 114.453 Q53.3021 114.083 50.8947 113.342 L50.8947 108.643 Q52.978 109.777 55.2002 110.333 Q57.4225 110.889 59.8993 110.889 Q63.9039 110.889 66.2419 108.782 Q68.5798 106.676 68.5798 103.065 Q68.5798 99.4535 66.2419 97.347 Q63.9039 95.2405 59.8993 95.2405 Q58.0243 95.2405 56.1493 95.6572 Q54.2975 96.0738 52.353 96.9535 L52.353 79.5924 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M92.4686 82.6711 Q88.8575 82.6711 87.0288 86.2359 Q85.2232 89.7776 85.2232 96.9072 Q85.2232 104.014 87.0288 107.578 Q88.8575 111.12 92.4686 111.12 Q96.1028 111.12 97.9083 107.578 Q99.737 104.014 99.737 96.9072 Q99.737 89.7776 97.9083 86.2359 Q96.1028 82.6711 92.4686 82.6711 M92.4686 78.9675 Q98.2787 78.9675 101.334 83.5739 Q104.413 88.1572 104.413 96.9072 Q104.413 105.634 101.334 110.24 Q98.2787 114.824 92.4686 114.824 Q86.6584 114.824 83.5797 110.24 Q80.5242 105.634 80.5242 96.9072 Q80.5242 88.1572 83.5797 83.5739 Q86.6584 78.9675 92.4686 78.9675 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip242)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"215.375,1751.15 239.685,1734.07 382.064,1634.05 448.299,1587.51 537.078,1525.14 610.437,1473.61 678.654,1425.68 764.289,1365.52 841.105,1311.56 929.031,1249.79 994.755,1203.61 1078.82,1144.56 1155.54,1090.65 1242.86,1029.31 1312.09,980.677 1398.09,920.259 1463.95,873.989 1556.8,808.756 1626.19,760.007 1705.1,704.57 1783.25,649.667 1869.23,589.265 1934.9,543.128 2017.78,484.907 2094.43,431.058 2173.48,375.523 2253.6,319.232 2337.27,260.453 2403.18,214.15 2553.27,108.703 2570.11,96.8724 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"215.375,1751.15 221.453,1730.08 227.53,1709.53 233.607,1689.49 239.685,1669.95 257.482,1615.38 275.28,1564.47 293.077,1516.87 310.874,1472.25 328.672,1430.35 346.469,1390.93 364.267,1353.78 382.064,1318.69 398.623,1287.77 415.181,1258.37 431.74,1230.39 448.299,1203.72 470.494,1169.89 492.689,1138.06 514.883,1108.06 537.078,1079.75 555.418,1057.52 573.758,1036.28 592.098,1015.95 610.437,996.491 644.546,962.402 678.654,930.801 721.472,894.256 764.289,860.778 802.697,833.054 841.105,807.272 885.068,779.891 929.031,754.543 961.893,736.791 994.755,719.972 1036.79,699.707 1078.82,680.719 1117.18,664.403 1155.54,648.974 1242.86,616.8 1312.09,593.842 1398.09,567.997 1463.95,549.952 1556.8,526.739 1626.19,510.887 1705.1,494.225 1783.25,478.994 1869.23,463.532 1934.9,452.539 2017.78,439.573 2094.43,428.396 2173.48,417.607 2253.6,407.364 2337.27,397.345 2403.18,389.897 2553.27,374.239 2570.11,372.586 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"215.375,1751.15 221.453,1751.04 227.53,1750.71 233.607,1750.16 239.685,1749.39 257.482,1745.88 275.28,1740.51 293.077,1733.33 310.874,1724.38 328.672,1713.72 346.469,1701.42 364.267,1687.55 382.064,1672.21 398.623,1656.69 415.181,1640.04 431.74,1622.36 448.299,1603.71 470.494,1577.37 492.689,1549.66 514.883,1520.79 537.078,1490.95 610.437,1387.79 678.654,1289.51 721.472,1228.44 764.289,1168.71 802.697,1116.7 841.105,1066.48 885.068,1011.42 929.031,959.138 961.893,921.922 994.755,886.315 1036.79,843.103 1078.82,802.453 1117.18,767.518 1155.54,734.572 1199.2,699.385 1242.86,666.526 1277.48,642.04 1312.09,618.859 1355.09,591.776 1398.09,566.473 1431.02,548.223 1463.95,530.893 1510.38,507.924 1556.8,486.549 1591.5,471.542 1626.19,457.307 1705.1,427.564 1783.25,401.336 1869.23,375.7 1934.9,358.107 2017.78,338.059 2094.43,321.4 2173.48,305.881 2253.6,291.668 2337.27,278.26 2403.18,268.614 2553.27,249.235 2570.11,247.261 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M227.934 313.055 L638.924 313.055 L638.924 105.695 L227.934 105.695  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"227.934,313.055 638.924,313.055 638.924,105.695 227.934,105.695 227.934,313.055 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"255.667,157.535 422.069,157.535 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M449.802 140.255 L479.038 140.255 L479.038 144.19 L466.77 144.19 L466.77 174.815 L462.071 174.815 L462.071 144.19 L449.802 144.19 L449.802 140.255 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M486.77 177.223 Q484.964 181.852 483.251 183.264 Q481.538 184.676 478.668 184.676 L475.265 184.676 L475.265 181.112 L477.765 181.112 Q479.524 181.112 480.497 180.278 Q481.469 179.445 482.649 176.343 L483.413 174.399 L472.927 148.889 L477.441 148.889 L485.543 169.167 L493.645 148.889 L498.159 148.889 L486.77 177.223 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M508.159 170.926 L508.159 184.676 L503.876 184.676 L503.876 148.889 L508.159 148.889 L508.159 152.825 Q509.501 150.51 511.538 149.399 Q513.598 148.264 516.446 148.264 Q521.168 148.264 524.108 152.014 Q527.071 155.764 527.071 161.876 Q527.071 167.987 524.108 171.737 Q521.168 175.487 516.446 175.487 Q513.598 175.487 511.538 174.375 Q509.501 173.241 508.159 170.926 M522.649 161.876 Q522.649 157.176 520.705 154.514 Q518.784 151.829 515.404 151.829 Q512.024 151.829 510.08 154.514 Q508.159 157.176 508.159 161.876 Q508.159 166.575 510.08 169.26 Q512.024 171.922 515.404 171.922 Q518.784 171.922 520.705 169.26 Q522.649 166.575 522.649 161.876 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M556.306 160.788 L556.306 162.871 L536.723 162.871 Q537.001 167.269 539.362 169.584 Q541.746 171.875 545.982 171.875 Q548.436 171.875 550.728 171.274 Q553.043 170.672 555.311 169.468 L555.311 173.496 Q553.019 174.468 550.612 174.977 Q548.205 175.487 545.728 175.487 Q539.524 175.487 535.89 171.875 Q532.279 168.264 532.279 162.107 Q532.279 155.741 535.705 152.014 Q539.154 148.264 544.987 148.264 Q550.219 148.264 553.251 151.644 Q556.306 155.001 556.306 160.788 M552.047 159.538 Q552.001 156.042 550.08 153.959 Q548.182 151.876 545.033 151.876 Q541.469 151.876 539.316 153.889 Q537.186 155.903 536.862 159.561 L552.047 159.538 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M578.552 140.255 L583.228 140.255 L583.228 174.815 L578.552 174.815 L578.552 140.255 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip240)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"255.667,209.375 422.069,209.375 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M449.802 192.095 L479.038 192.095 L479.038 196.03 L466.77 196.03 L466.77 226.655 L462.071 226.655 L462.071 196.03 L449.802 196.03 L449.802 192.095 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M486.77 229.063 Q484.964 233.692 483.251 235.104 Q481.538 236.516 478.668 236.516 L475.265 236.516 L475.265 232.952 L477.765 232.952 Q479.524 232.952 480.497 232.118 Q481.469 231.285 482.649 228.183 L483.413 226.239 L472.927 200.729 L477.441 200.729 L485.543 221.007 L493.645 200.729 L498.159 200.729 L486.77 229.063 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M508.159 222.766 L508.159 236.516 L503.876 236.516 L503.876 200.729 L508.159 200.729 L508.159 204.665 Q509.501 202.35 511.538 201.239 Q513.598 200.104 516.446 200.104 Q521.168 200.104 524.108 203.854 Q527.071 207.604 527.071 213.716 Q527.071 219.827 524.108 223.577 Q521.168 227.327 516.446 227.327 Q513.598 227.327 511.538 226.215 Q509.501 225.081 508.159 222.766 M522.649 213.716 Q522.649 209.016 520.705 206.354 Q518.784 203.669 515.404 203.669 Q512.024 203.669 510.08 206.354 Q508.159 209.016 508.159 213.716 Q508.159 218.415 510.08 221.1 Q512.024 223.762 515.404 223.762 Q518.784 223.762 520.705 221.1 Q522.649 218.415 522.649 213.716 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M556.306 212.628 L556.306 214.711 L536.723 214.711 Q537.001 219.109 539.362 221.424 Q541.746 223.715 545.982 223.715 Q548.436 223.715 550.728 223.114 Q553.043 222.512 555.311 221.308 L555.311 225.336 Q553.019 226.308 550.612 226.817 Q548.205 227.327 545.728 227.327 Q539.524 227.327 535.89 223.715 Q532.279 220.104 532.279 213.947 Q532.279 207.581 535.705 203.854 Q539.154 200.104 544.987 200.104 Q550.219 200.104 553.251 203.484 Q556.306 206.841 556.306 212.628 M552.047 211.378 Q552.001 207.882 550.08 205.799 Q548.182 203.716 545.033 203.716 Q541.469 203.716 539.316 205.729 Q537.186 207.743 536.862 211.401 L552.047 211.378 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M578.552 192.095 L583.228 192.095 L583.228 226.655 L578.552 226.655 L578.552 192.095 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M592.533 192.095 L597.209 192.095 L597.209 226.655 L592.533 226.655 L592.533 192.095 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip240)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"255.667,261.215 422.069,261.215 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M449.802 243.935 L479.038 243.935 L479.038 247.87 L466.77 247.87 L466.77 278.495 L462.071 278.495 L462.071 247.87 L449.802 247.87 L449.802 243.935 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M486.77 280.903 Q484.964 285.532 483.251 286.944 Q481.538 288.356 478.668 288.356 L475.265 288.356 L475.265 284.792 L477.765 284.792 Q479.524 284.792 480.497 283.958 Q481.469 283.125 482.649 280.023 L483.413 278.079 L472.927 252.569 L477.441 252.569 L485.543 272.847 L493.645 252.569 L498.159 252.569 L486.77 280.903 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M508.159 274.606 L508.159 288.356 L503.876 288.356 L503.876 252.569 L508.159 252.569 L508.159 256.505 Q509.501 254.19 511.538 253.079 Q513.598 251.944 516.446 251.944 Q521.168 251.944 524.108 255.694 Q527.071 259.444 527.071 265.556 Q527.071 271.667 524.108 275.417 Q521.168 279.167 516.446 279.167 Q513.598 279.167 511.538 278.055 Q509.501 276.921 508.159 274.606 M522.649 265.556 Q522.649 260.856 520.705 258.194 Q518.784 255.509 515.404 255.509 Q512.024 255.509 510.08 258.194 Q508.159 260.856 508.159 265.556 Q508.159 270.255 510.08 272.94 Q512.024 275.602 515.404 275.602 Q518.784 275.602 520.705 272.94 Q522.649 270.255 522.649 265.556 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M556.306 264.468 L556.306 266.551 L536.723 266.551 Q537.001 270.949 539.362 273.264 Q541.746 275.555 545.982 275.555 Q548.436 275.555 550.728 274.954 Q553.043 274.352 555.311 273.148 L555.311 277.176 Q553.019 278.148 550.612 278.657 Q548.205 279.167 545.728 279.167 Q539.524 279.167 535.89 275.555 Q532.279 271.944 532.279 265.787 Q532.279 259.421 535.705 255.694 Q539.154 251.944 544.987 251.944 Q550.219 251.944 553.251 255.324 Q556.306 258.681 556.306 264.468 M552.047 263.218 Q552.001 259.722 550.08 257.639 Q548.182 255.556 545.033 255.556 Q541.469 255.556 539.316 257.569 Q537.186 259.583 536.862 263.241 L552.047 263.218 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M578.552 243.935 L583.228 243.935 L583.228 278.495 L578.552 278.495 L578.552 243.935 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M592.533 243.935 L597.209 243.935 L597.209 278.495 L592.533 278.495 L592.533 243.935 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M606.515 243.935 L611.19 243.935 L611.19 278.495 L606.515 278.495 L606.515 243.935 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n```\n:::\n:::\n\n\n\n\n\n\n#### How does the BEFW make a functional response?\n\nThere are two formulations of the functional response.  One of them is called the _Bioenergetic_ response and the other is called the _Classic_.  In both cases, we ignore the Type I.\n\nThe Bioenergetic functional response is deeply phenomenological in that the parameters that make the shapes move between Type II and III have no deliberate biological interpretation.  They function is defined by a 1/2 saturation point, an asymptote (which is nominally a maxiumum feeding rate) and an exponent, which is called the _hill exponent_.  The value of the exponent moves the model from Type II (h = 1) to Type III (h = 2).  The other variables define the overall shape.\n\nThe Classic functional less phenomenological in that the response is defined more by 'traits': the attack rate of a consumer on a prey and the handling time of that prey.  But it also moves between the Type II and Type III shape based on an exponent.\n\n#### Creating Type II vs. Type III with the Bioenergetic response\n\nLet's look at using the Bioenergetic functional response, and see here how we can vary the shape between Type II and Type III. We can do this by modifying the *hill_exponent* after we have specified the model (*i.e.,* after the `default_model` call). We will look at how Richness, Biomass and Shannon Diversity are affected by the hill exponent.\n\n\n\n\n::: {#18 .cell execution_count=1}\n``` {.julia .cell-code}\nRandom.seed!(12352)\n\n# fixed parameters\nS = 20\nC = 0.15\n\n# set the hill exponent to move from Type II to Type III)\nh_levels = [1.0, 1.1, 1.25, 2.0]\n\n# set collecting data frame \n# we will look at how Richness, Biomass and Shannon Diversity are affected by the hill exponent\ndf_collect_h = DataFrame(h = [], FinalRichness = [], FinalBiomass = [], ShannonDiversity = [])\n\n# create look across values of h\nfor h in h_levels \n    println(\"***> This is iteration with h = $h\\n\")\n    \n    # make the network\n    # Note that we specify the Environment, but there is no K or T set (using defaults)\n    # Note the new BioenergeticResponse function\n    fw_h = Foodweb(:niche; S = S, C = C)\n    \n    # set body sizes and parameters \n    B0 = rand(S)\n    params = default_model(fw_h)\n\n    # here we now update the exponent of the hill function\n    params.hill_exponent = h\n\n    # specify number of time steps\n    t = 300\n\n    # simulate\n    sim_niche = simulate(params, B0, t)\n\n    # collect data \n    fin_rich = richness(sim_niche)\n    fin_bio = total_biomass(sim_niche)\n    s_div = shannon_diversity(sim_niche)\n\n    push!(df_collect_h, [h, fin_rich, fin_bio, s_div])\nend\n\ndf_collect_h\n```\n:::\n\n\n\n\n\n\nNow, we can visualise these data\n\n\n\n\n::: {#20 .cell execution_count=1}\n``` {.julia .cell-code}\n# Visualize the results\np1_h = @df df_collect_h plot(:h, [:FinalRichness],\n    legend = :bottomright,\n    ylabel = \"Richness\",\n    xlabel = \"Functional response\",\n    seriestype = [:scatter, :line])\n\np2_h = @df df_collect_h plot(:h, [:FinalBiomass],\n    legend = :bottomright,\n    ylabel = \"Biomass\",\n    xlabel = \"Functional response\",\n    seriestype = [:scatter, :line])\n\np3_h = @df df_collect_h plot(:h, [:ShannonDiversity],\n    legend = :bottomright,\n    ylabel = \"Shannon Diversity\",\n    xlabel = \"Functional response\",\n    seriestype = [:scatter, :line])\n\nplot(p1_h, p2_h, p3_h, layout=(3,1), legend = false, size = (1000, 1000))\n```\n:::\n\n\n\n\n\n\n#### INTERPRETATION?\n\nWhat can you see happening as we move away from the destabilising Type II functional response?\n\nCan you modify this code to explore what happens at different values of K? You'll need to modify this section, and the collection data frame.\n\n\n\n\n::: {#22 .cell execution_count=0}\n``` {.julia .cell-code}\n   # make the network\n    fw_h = Foodweb(:niche; S = S, C = C)\n\n    # set body sizes and parameters \n    B0 = rand(S)\n    params = default_model(fw_h, LogisticGrowth(; K = k))\n\n    # update the exponent of the hill function\n    params.hill_exponent = h\n```\n:::\n\n\n\n\n\n\n### Experiment 3: What is Z\n\nOne of the central features of the link between the Bioenergetic Food Web model and the structure of a foodweb created by models like the Niche Model is the organisation of trophic levels.  At the heart of this is a _data driven_ assumption about the ratio of predator size to prey size.  This is called the _Predator Prey Mass Ratio_, or `PPMR` for short.  \n\nIn 2006, Uli Brose and team collated hundreds of data [to reveal that](https://esajournals.onlinelibrary.wiley.com/doi/10.1890/0012-9658%282006%2987%5B2411%3ACBRINF%5D2.0.CO%3B2), on average, predators were between 10 and 100x bigger than their prey.\n\nIn our modelling framework, we use this ratio to help organise species into trophic levels.  This is done by organising the bodymass vector, and via a parameter called `Z`.  The body mass of consumers is a function of their mean trophic level (T), and it increases with trophic level when Z ≥ 1 and decreases when Z ≤ 1 via this relationship (see Delmas et al 2017 and Williams et al 2007):\n\n$M_C = Z^(T-1)$\n\n[Brose et al 2006](https://onlinelibrary.wiley.com/doi/10.1111/j.1461-0248.2006.00978.x) explored the impact of the _PPMR_ on stability and dynamics as part of their wider exploration of scaling and allometry in the bioenergetic model.  Here we show you how to manipulate `Z` and it's effect on stability.  `Z` is specified in the call to FoodWeb as the allocation of species with specific sizes is central to the trophic structure of the model.  This argument is interfaced with the bodysize vector in `model_parameters()`\n\n\n\n\n::: {#24 .cell execution_count=1}\n``` {.julia .cell-code}\nRandom.seed!(12352)\n\n# fixed parameters\nS = 20\nC = 0.15\n\n# set the PPRM\nz_levels= [0.1, 1, 10, 100]\n\n# set collecting data frame \n# we will look at how Richness, Biomass and Shannon Diversity are affected by the hill exponent\ndf_collect_z = DataFrame(z = [], FinalRichness = [], FinalBiomass = [], ShannonDiversity = [])\n\n# create look across values of h\nfor z in z_levels \n    println(\"***> This is iteration with z = $z\\n\")\n    \n    # make the network\n    # Note that we specify the Environment, but there is no K or T set (using defaults)\n    # Note Z is specified when building the FoodWeb() network\n    fw_z = Foodweb(:niche; S = S, C = C)\n    \n    # set body sizes and parameters \n    B0 = rand(S)\n    params = default_model(fw_z, BodyMass(; Z = z))\n\n    # specify number of time steps\n    t = 300\n\n    # simulate\n    out_z = simulate(params, B0, t)\n\n    # collect data \n    fin_rich = richness(out_z)\n    fin_bio = total_biomass(out_z)\n    s_div = shannon_diversity(out_z)\n\n    push!(df_collect_z, [z, fin_rich, fin_bio, s_div])\nend\n\ndf_collect_z\n```\n:::\n\n\n\n\n\n\nAs with the variation in `h`, we can create a set of figures too!  Perhaps it's worth your time to consult [Brose et al 2006](https://onlinelibrary.wiley.com/doi/10.1111/j.1461-0248.2006.00978.x) and [Reger et al 2017](https://besjournals.onlinelibrary.wiley.com/doi/10.1111/2041-210X.12713) to make sure you understand how Z works and particularly how stability is expected to vary with Z!  One of the most important things to understanding is why the stability metric is negative and what values of stability close, or far away, from zero mean.\n\n\n\n\n::: {#26 .cell execution_count=1}\n``` {.julia .cell-code}\n# Visualize the results\np1_z = @df df_collect_z plot(:z, [:FinalRichness],\n    legend = :bottomright,\n    ylabel = \"Richness\",\n    xlabel = \"Z value (PPMR)\",\n    seriestype = [:scatter, :line])\n\np2_z = @df df_collect_z plot(:z, [:FinalBiomass],\n    legend = :bottomright,\n    ylabel = \"Biomass\",\n    xlabel = \"Z value (PPMR)\",\n    seriestype = [:scatter, :line])\n\np3_z = @df df_collect_z plot(:z, [:ShannonDiversity],\n    legend = :bottomright,\n    ylabel = \"Shannon Diversity\",\n    xlabel = \"Z value (PPMR)\",\n    seriestype = [:scatter, :line])\n\nplot(p1_z, p2_z, p3_z, layout=(3,1), legend = false, size = (1000, 1000))\n```\n:::\n\n\n\n\n\n\n#### Challenge\n\nCould you modify this to ask about the interaction between Z and K?  This would be asking the question of whether the effect of PPMR on stability varies by system productivity.  Or you could ask about the interaction between the functional response, which we know also has a direct effect on stability by the assumption we make of a Type II or Type III shape, and the value of Z, which we also know impacts stability from Brose et al's work.\n\n### Experiment 4: Manipulating Competition among producers\n\nOur final experiment for this section involves manipulating how the basal producers compete with each other.  The default paramterisation of the model has each producer growing via the logistic equation and competing with itself via density dependence.  There is only intraspecific competition, no interspecific competition.\n\nWe can modify this assumption by invoking another function called `ProducerCompetition`.  This function acts like `LogisticGrowth` that we use to set `K` and `BioenergeticResponse` that we used to modify the functional response between Type II and Type III.\n\nThe theory to recall is that coexistence among species is mediated by the balance between intraspecific and interspecific competition.  When intraspecific competition is greater than interspecific competition, there is coexistence.  However, when interspecific competition is greater than intraspecific competition, there will be competitive exclusion and no coexistence.  \n\nWe call the competition parameters $\\alpha$. $\\alpha~ii$ defines intraspecific competition and $\\alpha~ij$ defines interspecific competition.  The $\\alpha~ij$ defines how the species $j$ reduces the carrying capacity (equilibrium) of species $i$.  \n\nWhat we can do is set $\\alpha~ii = 1$ and then vary $\\alpha~ij$ from $<1$ to $>1$.  We can expect that there will a dramatic change in biomass and species richness as we move from $alpha~ii > alpha~ij$ to $alpha~ii < alpha~ij$.\n\n\n\n\n\n::: {#28 .cell execution_count=1}\n``` {.julia .cell-code}\nS = 20 # define the number of species\nC = 0.2 # define the connectance (complexity) of the network\nZ = 100 # Predator Prey Mass Ratio\nt = 300 # time steps\n\n# here we set the \ninterspecific_vals = 0.8:0.05:1.2 # a set of (9) values between 0.8 and 1.2 in steps of 0.05\n# collect(0.8:0.05:1.2) # see them if you want to\n\n\n# set collecting data frame \n# we will look at how Richness, Biomass and Shannon Diversity are affected by interspecific competition\ndf_collect_comp = DataFrame(InterComp = [], FinalRichness = [], FinalBiomass = [], ShannonDiversity = [])\n\nfor alpha_ij in interspecific_vals\n    println(\"***> This is iteration with alpha_ij = $alpha_ij\\n\")\n    \n    # this will make always the same network and body mass\n    Random.seed!(123)\n    foodweb = Foodweb(:niche; S = S, C = C)\n\n    # enhance detail in the network\n    #We fix intraspecific = 1 (diag) and vary interspecific (off)\n    p = ProducersCompetition(foodweb; diag = 1.0, off = alpha_ij)\n    #Specify K and competition in LogisticGrowth\n    r = LogisticGrowth(K = 10, producers_competition = p)\n\n    #Set the hill exponent to 1 (type II Functional Response)\n    b = BioenergeticResponse(h = 1)\n\n    #Define parameters with extras\n    params_comp = default_model(foodweb, BodyMass(; Z = Z), b, r)\n\n    # set initial biomasses\n    B0 = rand(S)\n\n    # simulate\n    # note verbose = false ; remove this to see extinction detail for each sim\n    out_comp = simulate(params_comp, B0, t, verbose = false)\n\n    # generate stats and add to collector\n    # collect data \n    fin_rich = richness(out_comp)\n    fin_bio = total_biomass(out_comp)\n    s_div = shannon_diversity(out_comp)\n\n    push!(df_collect_comp, [alpha_ij, fin_rich, fin_bio, s_div])\nend\n\ndf_collect_comp\n```\n:::\n\n\n\n\n\n\nLet's review the assumptions above.  We've set the `Predator Prey Mass Ratio` to 100.  We've set carrying capacity `K` to 10.  We've set the functional response `h` value to 1, so it's a Type II functional response.  Finally, we've set a range of interspecific competition to be 0.8 to 1.2 around the fixed intraspecific effect of 1.\n\n\n\n\n\n::: {#30 .cell execution_count=1}\n``` {.julia .cell-code}\np1 = @df df_collect_comp plot(:InterComp, [:FinalRichness],\n    ylabel = \"Richness\",\n    xlabel = \"alpha_ij\",\n    seriestype = [:scatter, :line])\np2 = @df df_collect_comp plot(:InterComp, [:FinalBiomass],\n    ylabel = \"Biomass\",\n    xlabel = \"alpha_ij\",\n    seriestype = [:scatter, :line])\np3 = @df df_collect_comp plot(:InterComp, [:ShannonDiversity],\n    ylabel = \"Shannon Diversity\",\n    xlabel = \"alpha_ij\",\n    seriestype = [:scatter, :line])\n\nplot(p1, p2, p3, layout = (3,1), legend = false)\n```\n:::\n\n\n\n\n\n\n#### Challenge - Competition\n\nPerhaps consider expanding the code above to assess one of these?\n\nIs this pattern sensitive to species richness?\nIs this pattern sensitive to the functional response?\nIs this pattern sensitive to the PPMR?\nIs this pattern sensitive to values of K?\n\n## Experiment 5: Multiple networks (replicates)\n\nTo Do: run S (3 values), C (3 values) and h (3 values) where there are 5 replicate networks per combination.  Note we need 45 networks...\n\n",
    "supporting": [
      "10_complex_experiments_end_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}
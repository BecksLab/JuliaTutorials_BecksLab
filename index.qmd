---
title: "Julia and the BEFWM2 using VSCode"
date: now
author: "Danet and Becks, based on originals by Delmas and Griffiths"

format:
    html:
        embed-resources: true
title-block-banner: true
---

## Welcome to the Tutorials

This set of tutorials is designed to help you use an integrated coding tool, VSCode, to run experiments with the Bioenergetic Foodweb Model, built in the coding language Julia.

It will cover four core objectives

1. acquire/install the `Julia` programming language, the Integrated Development Environment called `VSCode`, and the `Bioenergetic Food Web Model` written in the Julia programming language.
2. Learn how to work with `Julia` programming, from installing packages to understanding arithmetic and plotting and data frames
3. Learn how to simulate a simple predator-prey (consumer-resource) model using the `DifferentialEquations` package in Julia
4. Learn how to implement and use the multi-species `BioenergeticFoodWebModel` in Julia

Having done these, you will then be introduced to further complexities and opportunities.

### Moving from R and RStudio to Julia and VSCode

For users of **R** and **RStudio**, **VSCode** and **Julia** can be thought of as the same working team, i.e. **VSCode**/**RStudio** are the text editors that allow you to create a 'rich text' environment from which to run **Julia**/**R**. That being said that (as to be expected) there are a few differences in the workflow that it might be worth familiarising yourself with.

**RStudio** users might be familiar with the concept of working with projects (i.e. a way of 'containerising' your work within a specific directory), **Julia** works in a similar manner, but at a much more local level. Broadly a **Julia** project is much more localised in that any packages that are imported (installed) locally for that specific project, meaning that it is possible to have multiple versions of a package installed for different projects - which is very handy from a reproducibility perspective. The details of the packages (dependencies) that you install are recorded in the `Project.toml` and the `Manifest.toml` files. Note these files are machine generated and will update as you add or removed packages while you work so you don't need to worry too much about them but its good to know what they mean/do. For an **R** specific analogy these files can be thought as the equivalents of the `renv.lock` file from the `{renv}` package.

The other thing to be aware of in **Julia** is the case of multiple dispatch, more specifically that it has a very strict type system that will affect the behaviour of a function. [This](https://www.moll.dev/projects/effective-multi-dispatch/) blog post provides a nice overview of the type system using pokemon types but the take-home message here is that it is important that you specify the correct type of an object (something that we will cover in Tutorial 2) and that often times when you run into an error it is because of that... This may seem annoying at first but it does mean that your code is much 'safer' because you won't (unknowingly) be converting and combining objects that are of different types unless you specifically specify it.

> insert quick ref table here?

### How to use these tutorials

The simple idea here is to make a Julia script and add the code in these tutorials to your scripts.  Make sure you annotate using the `#` symbol, as we do in R Scripts.  We suggest that You have a script associated with each section of the table of contents on the left.
